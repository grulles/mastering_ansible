---
# tasks file for nginx
- name: with_dict
  debug:
    msg: "{{ item.key }} - {{ item.value }}"
  with_dict: "{{ sites }}"

- name: Install nginx + VIM
  apt: name={{item}} state=present update_cache=yes
  with_items:
    - nginx
    - vim

- name: nginx loadbalancer configuration
  template: src=nginx.conf.j2 dest=/etc/nginx/sites-available/{{item.key}} mode=0644
  with_dict: "{{ sites }}"
  notify: restart nginx

# Cette tache permet de s'assurer qu'il n'y a qu'un site configurer. 
# Dans le lab nous avons demo creer depuis la stack ansible hardcode
# et myapp qui provient du dictionnaire site => "{{sites}}"
# Ici on liste ligne pas ligne les site enabled 
- name: get active sites
  shell: ls -1 /etc/nginx/sites-enabled/
  register: active

# Ici on supprime les sites enabled. La liste est retournee depuis le registre: active
# Mais uniquement si la valeur n'est pas la cl√© parent du dictionnaire site.
- name: Desactivate  nginx sites
  file: path=/etc/nginx/sites-enabled/{{item}} state=absent
  with_items: "{{active.stdout_lines}}"
  when: item not in sites 
  notify: restart nginx

- name: activate  nginx site
  file: src=/etc/nginx/sites-available/{{item.key}} dest=/etc/nginx/sites-enabled/{{item.key}} state=link
  with_dict: "{{ sites }}"
  notify: restart nginx

- name: Ensure nginx is started and comes up when server was rebooted
  service: name=nginx state=started enabled=yes
